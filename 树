 //中序遍历
 
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> ans;
    vector<int> inorderTraversal(TreeNode* root) {
        inor(ans,root);
        return ans;
    }
    void inor(vector<int>& ans,TreeNode* root){
        if(root==NULL) return;
        else{
            inor(ans,root->left);
            ans.push_back(root->val);
            inor(ans,root->right);
        }
    }
};
98. 验证二叉搜索树
给定一个二叉树，判断其是否是一个有效的二叉搜索树。

假设一个二叉搜索树具有如下特征：

节点的左子树只包含小于当前节点的数。
节点的右子树只包含大于当前节点的数。
所有左子树和右子树自身必须也是二叉搜索树。
代码块
class Solution {
public:
    bool isValidBST(TreeNode* root) {
        if(root == NULL) return true;
        //vector<int> t;
        dfs(root);
        for(int i =0;i < t.size() - 1;i++){
            if(t[i + 1] <= t[i]) return false;
        }
        return true;

    }   

    void dfs(TreeNode* root){
        if(root -> left) dfs(root->left);
        t.push_back(root -> val);
        if(root -> right) dfs(root->right);
    }
private:
    vector<int> t;
};
//方法：if(root){
}

//判断包含子树：
便利加判断

class Solution {
public:
    bool isSubStructure(TreeNode* A, TreeNode* B) {
        if (!A || !B) return false;
        return dfs(A, B) || isSubStructure(A->left, B) || isSubStructure(A->right, B);
    }
    
    bool dfs(TreeNode* A, TreeNode* B) {
        if (!B) return true; 
        if (!A) return false;
        return A->val == B->val && dfs(A->left, B->left) && dfs(A->right, B->right);
    }
};
数的右视角：
class Solution {
public:
    vector<int> rightSideView(TreeNode* root) {
        vector<int> view;
        queue<pair<TreeNode*,int>> Q;
        if(root){
            Q.push(make_pair(root,0));//pair堆；
        }
        while(!Q.empty()){
            TreeNode*node=Q.front().first;
            int depth=Q.front().second;
            Q.pop();
            if(view.size()==depth){
                view.push_back(node->val);//时刻更新；
            }
            else{
                view[depth]=node->val;
            }
            if(node->left){
                Q.push(make_pair(node->left,depth+1));

            }
            if(node->right){
                Q.push(make_pair(node->right,depth+1));
            }
        }
        return view;

    }
};

