/*DFS
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> children;

    Node() {}

    Node(int _val) {
        val = _val;
    }

    Node(int _val, vector<Node*> _children) {
        val = _val;
        children = _children;
    }
};
*/
class Solution {
public:
    vector<vector<int>> result;

    void dfs(Node* root, int dep){
        if(!root) return;
        if(dep == result.size()) result.emplace_back();
        result[dep].push_back(root->val);
        auto children = root->children;
        for(auto ele:children){
            dfs(ele, dep+1);
        }
    }
    vector<vector<int>> levelOrder(Node* root) {
        dfs(root, 0);
        return result;
    }
};
DFS 2
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int>> ans;
        pre(root, 0, ans);
        return ans;
    }
    
    void pre(TreeNode *root, int depth, vector<vector<int>> &ans) {
        if (!root) return ;
        
        
        if (depth >= ans.size())//重要
            ans.push_back(vector<int> {});
            
            
            
            
        ans[depth].push_back(root->val);
        pre(root->left, depth + 1, ans);
        pre(root->right, depth + 1, ans);
    }
};
/*BFS
class Solution {
public:
    vector<vector<int>> levelOrder(Node* root) {
        vector<vector<int>>res;
        if(root == NULL)return res;

        queue<Node*>q;
        q.push(root);
        while(!q.empty()){
            int n = q.size();
            vector<int>temp;
            while(n --){
                vector<Node*>child = q.front()->children;
                temp.push_back(q.front()->val);
                for(auto node:q.front()->children)
                    if(node)q.push(node);
                q.pop();
            }
            res.push_back(temp);
        }

        return res;
    }
};
锯齿状遍历：（DFS）
class Solution {
public:
    vector<vector<int>> res;   
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) 
    {
        addVector(root,0);      //调用递归函数
        return res;
    }
  
    void addVector(TreeNode* root,int level)
    {
        if(root == NULL)    return;
        if(res.size()==level)       res.resize(level+1);    //level表示层数，也对应二维数组的第一层索引，
        if(level %2==0)                                     
            res[level].push_back(root->val);                //如果为偶数行则顺序加入，如果为奇数行则将数字每次插入到最前面
        else
            res[level].insert(res[level].begin(),root->val);

        addVector(root->left,level+1);
        addVector(root->right,level+1);          
    }
};
BFS：
class Solution {
public:
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
        vector<vector<int>> res;
        
        if (root == NULL)   return {};  
        queue<TreeNode*> q;     
        q.push(root);  

        int level=0;
        while (!q.empty()) 
        {  
            vector<int>temp;                //存放每一层的元素值
            int count=q.size();             //队列大小表示当前层数的元素个数
            while(count--)                  //count--逐个对该层元素进行处理
            {
            TreeNode *t=q.front();             q.pop();    
            if(level%2 ==0) 
            temp.push_back(t->val);
            else
            temp.insert(temp.begin(),t->val);
            if(t->left)     q.push(t->left);
            if(t->right)    q.push(t->right);
            }

            level++;
            res.push_back(temp);           //将当层元素的vector加入res中
        }
        return res;
        }
};
