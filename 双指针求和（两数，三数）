两数求和：

//array = [1,2,3,4,5,6,7,8,9]; array is sorted in a increasing order
//target = 10;
int len = array.size();
int p1 = 0, p2 = len - 1; //p1 points to the start of the array and p2 points to the end
//the search stops when the two pointers meet each other
while(p1 < p2){
    if(array[p1] + array[p2] < target){
        p1++;
    }else if(array[p1] + array[p2] == target){
        cout << p1 << p2 << endl;
        p1++,p2--;
    }else{
        p2--;
    }
}

三数求和：
class Solution {
private:
    vector<vector<int>> ans;
    vector<int> temp;
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        int len=nums.size();
        for(int i=0;i<len-2;++i){
            if(i==0||(i>0&&nums[i]!=nums[i-1])){ //
                int low=i+1;
                int height=len-1;
                while(low<height){
                    if(nums[low]+nums[height]>-nums[i]){
                        height--;
                    }else if(nums[low]+nums[height]<-nums[i]){
                        low++;
                    }else if(nums[low]+nums[height]+nums[i]==0){
                        int prelow=nums[low];
                        int preheight=nums[height];
                        temp.push_back(nums[i]);
                        temp.push_back(prelow);
                        temp.push_back(preheight);
                        ans.push_back(temp);
                        temp.clear();
                        while(prelow==nums[low]&&low<height) low++;
                        //while(preheight==nums[height]) height--;
                    }
                }
            }
        }
        return ans;
    }
};
