/*
// Employee info
class Employee {
public:
    // It's the unique ID of each node.
    // unique id of this employee
    int id;
    // the importance value of this employee
    int importance;
    // the id of direct subordinates
    vector<int> subordinates;
};
*/
class Solution {
public:
    int getImportance(vector<Employee*> employees, int id) {//星号使用；88888888888888888888888888888
        map<int,Employee*> mp;//结构体为啥带星号；
        for(auto e:employees){
            mp[e->id]=e; 
        }
        queue<Employee*> q;
        q.push(mp[id]);
        int result=0;
        while(!q.empty()){
            Employee *e=q.front();
            q.pop();
            result+=e->importance;
            for(int sid:e->subordinates){
                q.push(mp[sid]);
            }
        }
        return result; 
    }
};
//递归
dfs直接调用
class Solution {
public:
    int getImportance(vector<Employee*> employees, int id) {
      for(auto e:employees){
            if(e->id==id){
              if(employees.size()==0){
                  return e->importance;
              }  
              for(int sid:e->subordinates){
                  e->importance+=getImportance(employees,sid);
              }
              return e->importance;
            }
        }
        return 0;///////
    }

};
dfs间接调用：
class Solution {
public:
    int dfs(unordered_map<int, Employee*>& mp, int id)
    {
        if (mp.count(id) == 0 || mp[id] == nullptr) return 0;
        int ans = mp[id]->importance;
        for (auto n : mp[id]->subordinates)
        {
            ans += dfs(mp, n);
        }
        return ans;
    }

    int getImportance(vector<Employee*> employees, int id)
    {
        unordered_map<int, Employee*> mp;
        for (auto p : employees)
        {
            if (p == nullptr) continue;
            mp[p->id] = p;
        }

        return dfs(mp, id);
    }
};

//BFS（542）：
class Solution {
private:
    static constexpr int dirs[4][2] = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};

public:
    vector<vector<int>> updateMatrix(vector<vector<int>>& matrix) {
        int m = matrix.size(), n = matrix[0].size();
        vector<vector<int>> dist(m, vector<int>(n));
        vector<vector<int>> seen(m, vector<int>(n));
        queue<pair<int, int>> q;
        // 将所有的 0 添加进初始队列中
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (matrix[i][j] == 0) {
                    q.emplace(i, j);
                    seen[i][j] = 1;
                }
            }
        }

        // 广度优先搜索
        while (!q.empty()) {
            auto [i, j] = q.front();
            q.pop();
            for (int d = 0; d < 4; ++d) {
                int ni = i + dirs[d][0];
                int nj = j + dirs[d][1];
                if (ni >= 0 && ni < m && nj >= 0 && nj < n && !seen[ni][nj]) {
                    dist[ni][nj] = dist[i][j] + 1;
                    q.emplace(ni, nj);
                    seen[ni][nj] = 1;
                }
            }
        }

    return dist;
    }
};
